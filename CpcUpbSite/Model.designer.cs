#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication3
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CPCupb")]
	public partial class ModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertRank(Rank instance);
    partial void UpdateRank(Rank instance);
    partial void DeleteRank(Rank instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertUsuario(Usuario instance);
    partial void UpdateUsuario(Usuario instance);
    partial void DeleteUsuario(Usuario instance);
    partial void InsertSolutionsPerUser(SolutionsPerUser instance);
    partial void UpdateSolutionsPerUser(SolutionsPerUser instance);
    partial void DeleteSolutionsPerUser(SolutionsPerUser instance);
    partial void InsertProblem(Problem instance);
    partial void UpdateProblem(Problem instance);
    partial void DeleteProblem(Problem instance);
    #endregion
		
		public ModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<MapEdge> MapEdges
		{
			get
			{
				return this.GetTable<MapEdge>();
			}
		}
		
		public System.Data.Linq.Table<Rank> Ranks
		{
			get
			{
				return this.GetTable<Rank>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Usuario> Usuarios
		{
			get
			{
				return this.GetTable<Usuario>();
			}
		}
		
		public System.Data.Linq.Table<SolutionsPerUser> SolutionsPerUsers
		{
			get
			{
				return this.GetTable<SolutionsPerUser>();
			}
		}
		
		public System.Data.Linq.Table<Problem> Problems
		{
			get
			{
				return this.GetTable<Problem>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<Rank> _Rank;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._Rank = default(EntityRef<Rank>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Rank", Storage="_Rank", ThisKey="UserId", OtherKey="IdUser", IsUnique=true, IsForeignKey=false)]
		public Rank Rank
		{
			get
			{
				return this._Rank.Entity;
			}
			set
			{
				Rank previousValue = this._Rank.Entity;
				if (((previousValue != value) 
							|| (this._Rank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._Rank.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("Rank");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Usuario", Storage="_Usuario", ThisKey="UserId", OtherKey="IdUser", IsUnique=true, IsForeignKey=false)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapEdges")]
	public partial class MapEdge
	{
		
		private int _IdSourceProblem;
		
		private int _IdDestProblem;
		
		public MapEdge()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSourceProblem", DbType="Int NOT NULL")]
		public int IdSourceProblem
		{
			get
			{
				return this._IdSourceProblem;
			}
			set
			{
				if ((this._IdSourceProblem != value))
				{
					this._IdSourceProblem = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDestProblem", DbType="Int NOT NULL")]
		public int IdDestProblem
		{
			get
			{
				return this._IdDestProblem;
			}
			set
			{
				if ((this._IdDestProblem != value))
				{
					this._IdDestProblem = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank")]
	public partial class Rank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdUser;
		
		private string _UvaUserName;
		
		private System.Nullable<int> _Solved;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdUserChanging(System.Guid value);
    partial void OnIdUserChanged();
    partial void OnUvaUserNameChanging(string value);
    partial void OnUvaUserNameChanged();
    partial void OnSolvedChanging(System.Nullable<int> value);
    partial void OnSolvedChanged();
    #endregion
		
		public Rank()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UvaUserName", DbType="VarChar(50)")]
		public string UvaUserName
		{
			get
			{
				return this._UvaUserName;
			}
			set
			{
				if ((this._UvaUserName != value))
				{
					this.OnUvaUserNameChanging(value);
					this.SendPropertyChanging();
					this._UvaUserName = value;
					this.SendPropertyChanged("UvaUserName");
					this.OnUvaUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solved", DbType="Int")]
		public System.Nullable<int> Solved
		{
			get
			{
				return this._Solved;
			}
			set
			{
				if ((this._Solved != value))
				{
					this.OnSolvedChanging(value);
					this.SendPropertyChanging();
					this._Solved = value;
					this.SendPropertyChanged("Solved");
					this.OnSolvedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Rank", Storage="_aspnet_User", ThisKey="IdUser", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Rank = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Rank = this;
						this._IdUser = value.UserId;
					}
					else
					{
						this._IdUser = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdComment;
		
		private int _IdProblem;
		
		private string _Commentary;
		
		private string _LinkToSolution;
		
		private System.Nullable<System.Guid> _IdUser;
		
		private string _NameUser;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCommentChanging(int value);
    partial void OnIdCommentChanged();
    partial void OnIdProblemChanging(int value);
    partial void OnIdProblemChanged();
    partial void OnCommentaryChanging(string value);
    partial void OnCommentaryChanged();
    partial void OnLinkToSolutionChanging(string value);
    partial void OnLinkToSolutionChanged();
    partial void OnIdUserChanging(System.Nullable<System.Guid> value);
    partial void OnIdUserChanged();
    partial void OnNameUserChanging(string value);
    partial void OnNameUserChanged();
    #endregion
		
		public Comment()
		{
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdComment", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdComment
		{
			get
			{
				return this._IdComment;
			}
			set
			{
				if ((this._IdComment != value))
				{
					this.OnIdCommentChanging(value);
					this.SendPropertyChanging();
					this._IdComment = value;
					this.SendPropertyChanged("IdComment");
					this.OnIdCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdProblem", DbType="Int NOT NULL")]
		public int IdProblem
		{
			get
			{
				return this._IdProblem;
			}
			set
			{
				if ((this._IdProblem != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdProblemChanging(value);
					this.SendPropertyChanging();
					this._IdProblem = value;
					this.SendPropertyChanged("IdProblem");
					this.OnIdProblemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commentary", DbType="VarChar(300)")]
		public string Commentary
		{
			get
			{
				return this._Commentary;
			}
			set
			{
				if ((this._Commentary != value))
				{
					this.OnCommentaryChanging(value);
					this.SendPropertyChanging();
					this._Commentary = value;
					this.SendPropertyChanged("Commentary");
					this.OnCommentaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkToSolution", DbType="VarChar(255)")]
		public string LinkToSolution
		{
			get
			{
				return this._LinkToSolution;
			}
			set
			{
				if ((this._LinkToSolution != value))
				{
					this.OnLinkToSolutionChanging(value);
					this.SendPropertyChanging();
					this._LinkToSolution = value;
					this.SendPropertyChanged("LinkToSolution");
					this.OnLinkToSolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameUser", DbType="VarChar(50)")]
		public string NameUser
		{
			get
			{
				return this._NameUser;
			}
			set
			{
				if ((this._NameUser != value))
				{
					this.OnNameUserChanging(value);
					this.SendPropertyChanging();
					this._NameUser = value;
					this.SendPropertyChanged("NameUser");
					this.OnNameUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_Comment", Storage="_Problem", ThisKey="IdProblem", OtherKey="IdUva", IsForeignKey=true)]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._IdProblem = value.IdUva;
					}
					else
					{
						this._IdProblem = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usuario")]
	public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdUser;
		
		private string _Nombre;
		
		private string _Universidad;
		
		private string _Uname;
		
		private int _Uid;
		
		private EntitySet<SolutionsPerUser> _SolutionsPerUsers;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdUserChanging(System.Guid value);
    partial void OnIdUserChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnUniversidadChanging(string value);
    partial void OnUniversidadChanged();
    partial void OnUnameChanging(string value);
    partial void OnUnameChanged();
    partial void OnUidChanging(int value);
    partial void OnUidChanged();
    #endregion
		
		public Usuario()
		{
			this._SolutionsPerUsers = new EntitySet<SolutionsPerUser>(new Action<SolutionsPerUser>(this.attach_SolutionsPerUsers), new Action<SolutionsPerUser>(this.detach_SolutionsPerUsers));
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50)")]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Universidad", DbType="VarChar(50)")]
		public string Universidad
		{
			get
			{
				return this._Universidad;
			}
			set
			{
				if ((this._Universidad != value))
				{
					this.OnUniversidadChanging(value);
					this.SendPropertyChanging();
					this._Universidad = value;
					this.SendPropertyChanged("Universidad");
					this.OnUniversidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uname", DbType="VarChar(60)")]
		public string Uname
		{
			get
			{
				return this._Uname;
			}
			set
			{
				if ((this._Uname != value))
				{
					this.OnUnameChanging(value);
					this.SendPropertyChanging();
					this._Uname = value;
					this.SendPropertyChanged("Uname");
					this.OnUnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="Int NOT NULL")]
		public int Uid
		{
			get
			{
				return this._Uid;
			}
			set
			{
				if ((this._Uid != value))
				{
					this.OnUidChanging(value);
					this.SendPropertyChanging();
					this._Uid = value;
					this.SendPropertyChanged("Uid");
					this.OnUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_SolutionsPerUser", Storage="_SolutionsPerUsers", ThisKey="Uid", OtherKey="Uid")]
		public EntitySet<SolutionsPerUser> SolutionsPerUsers
		{
			get
			{
				return this._SolutionsPerUsers;
			}
			set
			{
				this._SolutionsPerUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Usuario", Storage="_aspnet_User", ThisKey="IdUser", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Usuario = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Usuario = this;
						this._IdUser = value.UserId;
					}
					else
					{
						this._IdUser = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SolutionsPerUsers(SolutionsPerUser entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_SolutionsPerUsers(SolutionsPerUser entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SolutionsPerUser")]
	public partial class SolutionsPerUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Uid;
		
		private int _Problemid;
		
		private int _SolutionId;
		
		private EntityRef<Usuario> _Usuario;
		
		private EntityRef<Problem> _Problem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUidChanging(int value);
    partial void OnUidChanged();
    partial void OnProblemidChanging(int value);
    partial void OnProblemidChanged();
    partial void OnSolutionIdChanging(int value);
    partial void OnSolutionIdChanged();
    #endregion
		
		public SolutionsPerUser()
		{
			this._Usuario = default(EntityRef<Usuario>);
			this._Problem = default(EntityRef<Problem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="Int NOT NULL")]
		public int Uid
		{
			get
			{
				return this._Uid;
			}
			set
			{
				if ((this._Uid != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUidChanging(value);
					this.SendPropertyChanging();
					this._Uid = value;
					this.SendPropertyChanged("Uid");
					this.OnUidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Problemid", DbType="Int NOT NULL")]
		public int Problemid
		{
			get
			{
				return this._Problemid;
			}
			set
			{
				if ((this._Problemid != value))
				{
					if (this._Problem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProblemidChanging(value);
					this.SendPropertyChanging();
					this._Problemid = value;
					this.SendPropertyChanged("Problemid");
					this.OnProblemidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolutionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SolutionId
		{
			get
			{
				return this._SolutionId;
			}
			set
			{
				if ((this._SolutionId != value))
				{
					this.OnSolutionIdChanging(value);
					this.SendPropertyChanging();
					this._SolutionId = value;
					this.SendPropertyChanged("SolutionId");
					this.OnSolutionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_SolutionsPerUser", Storage="_Usuario", ThisKey="Uid", OtherKey="Uid", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.SolutionsPerUsers.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.SolutionsPerUsers.Add(this);
						this._Uid = value.Uid;
					}
					else
					{
						this._Uid = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_SolutionsPerUser", Storage="_Problem", ThisKey="Problemid", OtherKey="UvaProblemId", IsForeignKey=true)]
		public Problem Problem
		{
			get
			{
				return this._Problem.Entity;
			}
			set
			{
				Problem previousValue = this._Problem.Entity;
				if (((previousValue != value) 
							|| (this._Problem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Problem.Entity = null;
						previousValue.SolutionsPerUsers.Remove(this);
					}
					this._Problem.Entity = value;
					if ((value != null))
					{
						value.SolutionsPerUsers.Add(this);
						this._Problemid = value.UvaProblemId;
					}
					else
					{
						this._Problemid = default(int);
					}
					this.SendPropertyChanged("Problem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Problem")]
	public partial class Problem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdUva;
		
		private string _Name;
		
		private System.Nullable<decimal> _Latitude;
		
		private System.Nullable<decimal> _Longitude;
		
		private string _Description;
		
		private string _URL;
		
		private string _MarkerIcon;
		
		private int _UvaProblemId;
		
		private System.Nullable<int> _Difficulty;
		
		private string _MarkerIconSolved;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<SolutionsPerUser> _SolutionsPerUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdUvaChanging(int value);
    partial void OnIdUvaChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLatitudeChanging(System.Nullable<decimal> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<decimal> value);
    partial void OnLongitudeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnMarkerIconChanging(string value);
    partial void OnMarkerIconChanged();
    partial void OnUvaProblemIdChanging(int value);
    partial void OnUvaProblemIdChanged();
    partial void OnDifficultyChanging(System.Nullable<int> value);
    partial void OnDifficultyChanged();
    partial void OnMarkerIconSolvedChanging(string value);
    partial void OnMarkerIconSolvedChanged();
    #endregion
		
		public Problem()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._SolutionsPerUsers = new EntitySet<SolutionsPerUser>(new Action<SolutionsPerUser>(this.attach_SolutionsPerUsers), new Action<SolutionsPerUser>(this.detach_SolutionsPerUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUva", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdUva
		{
			get
			{
				return this._IdUva;
			}
			set
			{
				if ((this._IdUva != value))
				{
					this.OnIdUvaChanging(value);
					this.SendPropertyChanging();
					this._IdUva = value;
					this.SendPropertyChanged("IdUva");
					this.OnIdUvaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(18,6)")]
		public System.Nullable<decimal> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(18,6)")]
		public System.Nullable<decimal> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(100)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerIcon", DbType="VarChar(150)")]
		public string MarkerIcon
		{
			get
			{
				return this._MarkerIcon;
			}
			set
			{
				if ((this._MarkerIcon != value))
				{
					this.OnMarkerIconChanging(value);
					this.SendPropertyChanging();
					this._MarkerIcon = value;
					this.SendPropertyChanged("MarkerIcon");
					this.OnMarkerIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UvaProblemId", DbType="Int NOT NULL")]
		public int UvaProblemId
		{
			get
			{
				return this._UvaProblemId;
			}
			set
			{
				if ((this._UvaProblemId != value))
				{
					this.OnUvaProblemIdChanging(value);
					this.SendPropertyChanging();
					this._UvaProblemId = value;
					this.SendPropertyChanged("UvaProblemId");
					this.OnUvaProblemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Difficulty", DbType="Int")]
		public System.Nullable<int> Difficulty
		{
			get
			{
				return this._Difficulty;
			}
			set
			{
				if ((this._Difficulty != value))
				{
					this.OnDifficultyChanging(value);
					this.SendPropertyChanging();
					this._Difficulty = value;
					this.SendPropertyChanged("Difficulty");
					this.OnDifficultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkerIconSolved", DbType="VarChar(150)")]
		public string MarkerIconSolved
		{
			get
			{
				return this._MarkerIconSolved;
			}
			set
			{
				if ((this._MarkerIconSolved != value))
				{
					this.OnMarkerIconSolvedChanging(value);
					this.SendPropertyChanging();
					this._MarkerIconSolved = value;
					this.SendPropertyChanged("MarkerIconSolved");
					this.OnMarkerIconSolvedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_Comment", Storage="_Comments", ThisKey="IdUva", OtherKey="IdProblem")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Problem_SolutionsPerUser", Storage="_SolutionsPerUsers", ThisKey="UvaProblemId", OtherKey="Problemid")]
		public EntitySet<SolutionsPerUser> SolutionsPerUsers
		{
			get
			{
				return this._SolutionsPerUsers;
			}
			set
			{
				this._SolutionsPerUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
		
		private void attach_SolutionsPerUsers(SolutionsPerUser entity)
		{
			this.SendPropertyChanging();
			entity.Problem = this;
		}
		
		private void detach_SolutionsPerUsers(SolutionsPerUser entity)
		{
			this.SendPropertyChanging();
			entity.Problem = null;
		}
	}
}
#pragma warning restore 1591
